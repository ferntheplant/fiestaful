---
import Layout from "../layouts/Layout.astro";
import RSVPList from "../components/RSVPList.astro";
import CommunicationHelpers from "../components/CommunicationHelpers.astro";
import { supabase } from "../lib/supabase";
import { getSessionCookie, verifyAdminPassword } from "../lib/auth";
import { formatDate, formatTime } from "../lib/utils";

// Check for admin session
const cookies = Astro.request.headers.get("cookie") || "";
const adminSession = getSessionCookie(cookies, "admin");

// If no session, redirect to login
if (!adminSession) {
  return Astro.redirect("/login?access_type=admin");
}

// Verify session is still valid
const isValidSession = await verifyAdminPassword(adminSession);
if (!isValidSession) {
  return Astro.redirect("/login?access_type=admin");
}

// Check if Supabase is configured
if (!supabase) {
  return Astro.redirect(
    "/login?error=supabase_not_configured&access_type=admin",
  );
}

// Get event data
const { data: eventData, error: eventError } = await supabase
  .from("event")
  .select("*")
  .single();

if (eventError || !eventData) {
  return Astro.redirect("/login?error=event_not_found&access_type=admin");
}

// Get RSVPs
const { data: rsvps, error: rsvpError } = await supabase
  .from("rsvps")
  .select("*")
  .order("created_at", { ascending: false });

const rsvpList = rsvps || [];

// Get updates
const { data: updates, error: updatesError } = await supabase
  .from("updates")
  .select("*")
  .order("created_at", { ascending: false });

const updatesList = updates || [];

// Get URL parameters for success/error messages
const url = new URL(Astro.request.url);
const successMessage = url.searchParams.get("success");
const errorMessage = url.searchParams.get("error");

// Get current URL for communication helpers
const eventUrl = Astro.url.origin;
---

<Layout title="Admin Dashboard - Event Management">
  <div class="min-h-screen bg-gray-50">
    <!-- Header -->
    <header class="bg-white shadow-sm border-b">
      <div class="container mx-auto px-4 py-4">
        <div class="flex items-center justify-between">
          <div>
            <h1 class="text-2xl font-bold text-gray-800">Admin Dashboard</h1>
            <p class="text-gray-600">{eventData.name}</p>
          </div>
          <a
            href="/"
            class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition duration-200"
          >
            View Event Page
          </a>
        </div>
      </div>
    </header>

    <div class="container mx-auto px-4 py-8">
      {
        successMessage && (
          <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-6">
            {successMessage}
          </div>
        )
      }

      {
        errorMessage && (
          <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
            {errorMessage}
          </div>
        )
      }

      <!-- Event Management Section -->
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8">
        <!-- Event Details -->
        <div class="lg:col-span-2">
          <div class="bg-white rounded-lg shadow-lg p-6">
            <h2 class="text-xl font-bold text-gray-800 mb-4">Event Details</h2>

            <form method="POST" action="/api/admin-actions" class="space-y-4">
              <input type="hidden" name="action" value="update_event" />

              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label
                    for="name"
                    class="block text-sm font-medium text-gray-700 mb-1"
                  >
                    Event Name
                  </label>
                  <input
                    type="text"
                    id="name"
                    name="name"
                    value={eventData.name}
                    required
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label
                    for="date"
                    class="block text-sm font-medium text-gray-700 mb-1"
                  >
                    Date
                  </label>
                  <input
                    type="datetime-local"
                    id="date"
                    name="date"
                    value={eventData.date
                      ? new Date(eventData.date).toISOString().slice(0, 16)
                      : ""}
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              </div>

              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label
                    for="time"
                    class="block text-sm font-medium text-gray-700 mb-1"
                  >
                    Time (Display)
                  </label>
                  <input
                    type="text"
                    id="time"
                    name="time"
                    value={eventData.time || ""}
                    placeholder="e.g., 6:00 PM"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label
                    for="location"
                    class="block text-sm font-medium text-gray-700 mb-1"
                  >
                    Location
                  </label>
                  <input
                    type="text"
                    id="location"
                    name="location"
                    value={eventData.location || ""}
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              </div>

              <div>
                <label
                  for="description"
                  class="block text-sm font-medium text-gray-700 mb-1"
                >
                  Description
                </label>
                <textarea
                  id="description"
                  name="description"
                  rows="4"
                  class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >{eventData.description || ""}</textarea
                >
              </div>

              <div class="flex items-center space-x-6">
                <label class="flex items-center">
                  <input
                    type="checkbox"
                    name="accepting_rsvps"
                    checked={eventData.accepting_rsvps}
                    class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span class="ml-2 text-sm text-gray-700">Accepting RSVPs</span
                  >
                </label>

                <label class="flex items-center">
                  <input
                    type="checkbox"
                    name="is_public"
                    checked={eventData.is_public}
                    class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <span class="ml-2 text-sm text-gray-700">Public Event</span>
                </label>
              </div>

              <button
                type="submit"
                class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded transition duration-200"
              >
                Update Event
              </button>
            </form>
          </div>
        </div>

        <!-- Quick Stats -->
        <div class="space-y-6">
          <div class="bg-white rounded-lg shadow-lg p-6">
            <h3 class="text-lg font-semibold text-gray-800 mb-4">
              Quick Stats
            </h3>

            <div class="space-y-3">
              <div class="flex justify-between">
                <span class="text-gray-600">Total RSVPs:</span>
                <span class="font-semibold">{rsvpList.length}</span>
              </div>

              <div class="flex justify-between">
                <span class="text-gray-600">Attending:</span>
                <span class="font-semibold text-green-600">
                  {rsvpList.filter((r) => r.response === "yes").length}
                </span>
              </div>

              <div class="flex justify-between">
                <span class="text-gray-600">Not Attending:</span>
                <span class="font-semibold text-red-600">
                  {rsvpList.filter((r) => r.response === "no").length}
                </span>
              </div>

              <div class="flex justify-between">
                <span class="text-gray-600">Maybe:</span>
                <span class="font-semibold text-yellow-600">
                  {rsvpList.filter((r) => r.response === "maybe").length}
                </span>
              </div>
            </div>
          </div>

          <!-- Post Update -->
          <div class="bg-white rounded-lg shadow-lg p-6">
            <h3 class="text-lg font-semibold text-gray-800 mb-4">
              Post Update
            </h3>

            <form method="POST" action="/api/admin-actions" class="space-y-3">
              <input type="hidden" name="action" value="post_update" />

              <textarea
                name="content"
                rows="3"
                placeholder="Share an update with your guests..."
                required
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              ></textarea>

              <button
                type="submit"
                class="w-full bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded transition duration-200"
              >
                Post Update
              </button>
            </form>
          </div>
        </div>
      </div>

      <!-- RSVP List with Details -->
      <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
        <h2 class="text-xl font-bold text-gray-800 mb-4">All RSVPs</h2>
        <RSVPList rsvps={rsvpList} showDetails={true} />
      </div>

      <!-- Communication Tools -->
      <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
        <h2 class="text-xl font-bold text-gray-800 mb-4">
          Communication Tools
        </h2>
        <CommunicationHelpers
          rsvps={rsvpList}
          eventDetails={eventData}
          eventUrl={eventUrl}
        />
      </div>

      <!-- Recent Updates -->
      {
        updatesList.length > 0 && (
          <div class="bg-white rounded-lg shadow-lg p-6">
            <h2 class="text-xl font-bold text-gray-800 mb-4">Recent Updates</h2>

            <div class="space-y-4">
              {updatesList.map((update) => (
                <div class="border-l-4 border-blue-500 pl-4 py-2">
                  <p class="text-gray-800">{update.content}</p>
                  <p class="text-sm text-gray-500 mt-1">
                    {formatDate(update.created_at)}
                  </p>
                </div>
              ))}
            </div>
          </div>
        )
      }
    </div>
  </div>
</Layout>

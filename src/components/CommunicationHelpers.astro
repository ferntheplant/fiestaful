---
export interface Props {
  rsvps: Array<{
    guest_name: string;
    guest_email: string;
    guest_phone?: string;
    response: "yes" | "no" | "maybe";
  }>;
  eventDetails: {
    name: string;
    description?: string;
    date?: string;
    time?: string;
    location?: string;
  };
  eventUrl: string;
}

const { rsvps, eventDetails, eventUrl } = Astro.props;

// Filter RSVPs by response
const attendingRSVPs = rsvps.filter((r) => r.response === "yes");
const allEmails = rsvps.map((r) => r.guest_email).join("; ");
const attendingEmails = attendingRSVPs.map((r) => r.guest_email).join("; ");
const allPhones = rsvps
  .filter((r) => r.guest_phone)
  .map((r) => r.guest_phone)
  .join("; ");
const attendingPhones = attendingRSVPs
  .filter((r) => r.guest_phone)
  .map((r) => r.guest_phone)
  .join("; ");

// Generate invitation text
const invitationText = `You're invited to ${eventDetails.name}!

${eventDetails.description ? `Details: ${eventDetails.description}` : ""}
${eventDetails.date ? `Date: ${eventDetails.date}` : ""}
${eventDetails.time ? `Time: ${eventDetails.time}` : ""}
${eventDetails.location ? `Location: ${eventDetails.location}` : ""}

Please RSVP here: ${eventUrl}

Looking forward to seeing you there!`;
---

<!-- COMMUNICATION HELPERS SECTION: Copy buttons and communication assistance -->
<section class="communication-helpers bg-gray-100 py-12">
  <div class="container mx-auto px-4 max-w-4xl">
    <h2 class="text-3xl font-bold text-center mb-8 text-gray-800">
      Communication Tools
    </h2>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <!-- Copy Tools -->
      <div class="bg-white rounded-lg shadow-lg p-6">
        <h3 class="text-xl font-semibold mb-4 text-gray-800">
          Copy Information
        </h3>

        <div class="space-y-3">
          <button
            id="copyAllEmails"
            data-text={allEmails}
            class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded transition duration-200"
          >
            üìß Copy All Email Addresses
          </button>

          <button
            id="copyAttendingEmails"
            data-text={attendingEmails}
            class="w-full bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded transition duration-200"
          >
            ‚úÖ Copy Attending Emails Only
          </button>

          <button
            id="copyAllPhones"
            data-text={allPhones}
            class="w-full bg-purple-600 hover:bg-purple-700 text-white font-medium py-2 px-4 rounded transition duration-200"
          >
            üìû Copy All Phone Numbers
          </button>

          <button
            id="copyEventLink"
            data-text={eventUrl}
            class="w-full bg-gray-600 hover:bg-gray-700 text-white font-medium py-2 px-4 rounded transition duration-200"
          >
            üîó Copy Event Link
          </button>

          <button
            id="copyInvitationText"
            data-text={invitationText}
            class="w-full bg-orange-600 hover:bg-orange-700 text-white font-medium py-2 px-4 rounded transition duration-200"
          >
            üìù Copy Invitation Text
          </button>
        </div>
      </div>

      <!-- Email and Calendar Tools -->
      <div class="bg-white rounded-lg shadow-lg p-6">
        <h3 class="text-xl font-semibold mb-4 text-gray-800">Quick Actions</h3>

        <div class="space-y-3">
          <a
            href={`mailto:${allEmails}?subject=${encodeURIComponent(`You're invited to ${eventDetails.name}`)}&body=${encodeURIComponent(invitationText)}`}
            class="block w-full bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded text-center transition duration-200"
          >
            üìß Email All Guests
          </a>

          <a
            href={`mailto:${attendingEmails}?subject=${encodeURIComponent(`Update for ${eventDetails.name}`)}&body=${encodeURIComponent(`Hi everyone!

Just a quick update about ${eventDetails.name}...`)}`}
            class="block w-full bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded text-center transition duration-200"
          >
            ‚úÖ Email Attending Guests
          </a>

          <button
            id="downloadCalendar"
            class="w-full bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-2 px-4 rounded transition duration-200"
          >
            üìÖ Download Calendar File
          </button>

          <button
            id="generateQR"
            class="w-full bg-teal-600 hover:bg-teal-700 text-white font-medium py-2 px-4 rounded transition duration-200"
          >
            üì± Generate QR Code
          </button>
        </div>
      </div>
    </div>

    <!-- QR Code Display -->
    <div id="qrCodeContainer" class="hidden mt-6 text-center">
      <div class="bg-white rounded-lg shadow-lg p-6 inline-block">
        <h3 class="text-lg font-semibold mb-4">QR Code for Event</h3>
        <div id="qrCodeImage" class="mb-4"></div>
        <button
          id="downloadQR"
          class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded transition duration-200"
        >
          Download QR Code
        </button>
      </div>
    </div>
  </div>
</section>

<script define:vars={{ eventDetails, eventUrl }}>
  // Copy to clipboard functionality
  document.addEventListener("DOMContentLoaded", function () {
    const copyButtons = document.querySelectorAll('[id^="copy"]');

    copyButtons.forEach((button) => {
      button.addEventListener("click", async function () {
        const text = this.getAttribute("data-text");
        if (!text) return;

        try {
          await navigator.clipboard.writeText(text);
          const originalText = this.textContent;
          this.textContent = "‚úÖ Copied!";
          this.classList.add("bg-green-600");

          setTimeout(() => {
            this.textContent = originalText;
            this.classList.remove("bg-green-600");
          }, 2000);
        } catch (error) {
          console.error("Failed to copy text:", error);
        }
      });
    });

    // Calendar download
    document
      .getElementById("downloadCalendar")
      ?.addEventListener("click", function () {
        const icsContent = [
          "BEGIN:VCALENDAR",
          "VERSION:2.0",
          "PRODID:-//Event RSVP//EN",
          "BEGIN:VEVENT",
          `UID:${Date.now()}@event-rsvp.com`,
          `DTSTAMP:${new Date().toISOString().replace(/[-:]/g, "").split(".")[0]}Z`,
          `DTSTART:${new Date().toISOString().replace(/[-:]/g, "").split(".")[0]}Z`,
          `SUMMARY:${eventDetails.name}`,
          `DESCRIPTION:${eventDetails.description || ""}`,
          `LOCATION:${eventDetails.location || ""}`,
          "END:VEVENT",
          "END:VCALENDAR",
        ].join("\r\n");

        const blob = new Blob([icsContent], { type: "text/calendar" });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = `${eventDetails.name.replace(/[^a-z0-9]/gi, "_").toLowerCase()}.ics`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      });

    // QR Code generation
    document
      .getElementById("generateQR")
      ?.addEventListener("click", async function () {
        const container = document.getElementById("qrCodeContainer");
        const imageContainer = document.getElementById("qrCodeImage");

        if (!container || !imageContainer) return;

        try {
          // Simple QR code generation (in production, use a proper QR library)
          const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(eventUrl)}`;

          imageContainer.innerHTML = `<img src="${qrUrl}" alt="QR Code" class="mx-auto" />`;
          container.classList.remove("hidden");

          // Scroll to QR code
          container.scrollIntoView({ behavior: "smooth" });
        } catch (error) {
          console.error("Failed to generate QR code:", error);
        }
      });

    // Download QR Code
    document
      .getElementById("downloadQR")
      ?.addEventListener("click", function () {
        const img = document.querySelector("#qrCodeImage img");
        if (!img) return;

        const a = document.createElement("a");
        a.href = img.src;
        a.download = `${eventDetails.name.replace(/[^a-z0-9]/gi, "_").toLowerCase()}_qr.png`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
      });
  });
</script>
